MODULE philosopher(lfork, rfork)
VAR
	state: {thinking, eating};
ASSIGN
	init(state) := thinking;
	next(lfork) :=
		case
			(lfork = ready): busy;
			(lfork = busy): ready;
			TRUE: lfork;
		esac;
	next(rfork) :=
		case
			(rfork = ready): busy;
			(rfork = busy): ready;
			TRUE: rfork;
		esac;
	next(state):=
		case
			(state = thinking & lfork = ready & rfork = ready): eating;
			(state = eating): thinking;
			TRUE: state;
		esac;


MODULE main
VAR
	fork0 : {ready, busy};
	fork1 : {ready, busy};
	fork2 : {ready, busy};
	fork3 : {ready, busy};
	fork4 : {ready, busy};
	phil0 : process philosopher (fork0, fork1);
	phil1 : process philosopher (fork1, fork2);
	phil2 : process philosopher (fork2, fork3);
	phil3 : process philosopher (fork3, fork4);
	phil4 : process philosopher (fork4, fork0);
ASSIGN
	init (fork0) := ready;
	init (fork1) := ready;
	init (fork2) := ready;
	init (fork3) := ready;
	init (fork4) := ready;

DEFINE
	starvation := phil0.state = thinking; 
	
SPEC AG (phil0.state = thinking -> AF (phil0.state = eating));
SPEC EG (phil0.state = thinking -> AF (phil0.state = eating));
SPEC EX (phil0.state = thinking -> AF (phil0.state = eating));
SPEC AG (starvation)